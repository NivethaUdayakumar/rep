if (req.method === 'POST' && pathname === '/api/shell') {
  let body = '';
  req.on('data', (c) => (body += c));
  req.on('end', async () => {
    try {
      const { commands } = JSON.parse(body || '{}');
      if (!Array.isArray(commands)) {
        res.writeHead(400, { 'Content-Type': 'application/json' });
        return res.end(JSON.stringify({ error: 'commands must be an array of strings' }));
      }
      const { exec } = require('child_process');
      const run = (cmd) =>
        new Promise((resolve) => {
          exec(cmd, { cwd: process.cwd() }, (err, stdout, stderr) => {
            resolve({ cmd, code: err ? err.code ?? 1 : 0, stdout, stderr });
          });
        });
      const results = [];
      for (const cmd of commands) {
        results.push(typeof cmd === 'string' ? await run(cmd) : { cmd: String(cmd), code: 1, stdout: '', stderr: 'not a string' });
      }
      res.writeHead(200, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify({ ok: true, results }));
    } catch {
      res.writeHead(400, { 'Content-Type': 'application/json' });
      res.end(JSON.stringify({ error: 'invalid json' }));
    }
  });
  return;
}
